#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -name reverse_mpegts -mnesia debug verbose

-define(TIMEOUT, 4000).
-define(COUNTER, 100).
-define(D(X), io:format("DEBUG:~p ~p~n",[?LINE, X])).

-record(pusher, {
  from_url,
  to_url,
  from_counter = 0,
  to_counter = 0,
  from = undefined,
  to = undefined
}).


main([FromUrl, ToUrl]) ->
  run_loop(#pusher{from_url = FromUrl, to_url = ToUrl}).
  
  

connect_source(From) ->
  {_, _, Host, Port, Path, Query} = http_uri:parse(From),
  case gen_tcp:connect(Host, Port, [binary, {packet, http_bin}, {active, false}], 1000) of
    {ok, Socket} -> 
      ?D({"Connected to", From}),
      gen_tcp:send(Socket, "GET "++Path++"?"++Query++" HTTP/1.1\r\nHost: "++Host++"\r\n\r\n"),
      read_response(Socket);
    {error, econnrefused} ->
      ?D({"Cannot connect source", From}),
      timer:sleep(500),
      connect_source(From)
  end.
  
read_response(Socket) ->
  inet:setopts(Socket, [{active, once}]),
  receive 
    {http, Socket, {http_response, _Version, 200, _Reply}} ->
      read_headers(Socket);
    Else -> ?D({"ZZ", Else})
  after
    ?TIMEOUT -> 
      ?D({"Timeout reading http response"}),
      false
  end.
  
read_headers(Socket) ->
  inet:setopts(Socket, [{active, once}]),
  receive
    {http, Socket, {http_header, _, _Header, _, _Value}} ->
      read_headers(Socket);
    {http, Socket, http_eoh} ->
      inet:setopts(Socket, [{packet, raw}]),
      ?D({"Connected to source"}),
      Socket
  after
    ?TIMEOUT -> 
      ?D({"Timeout reading http headers"}),
      false
  end.
  
    


connect_to(To) ->
  {_, _, Host, Port, Path, Query} = http_uri:parse(To),
  case gen_tcp:connect(Host, Port, [binary, {packet, http_bin}, {active, false}], 1000) of
    {ok, Socket} ->
      gen_tcp:send(Socket, "PUT "++Path++"?"++Query++" HTTP/1.1\r\nHost: "++Host++"\r\n\r\n"),
      ?D({"Connected to destination"}),
      Socket;
    {error, econnrefused} ->
      ?D({"Destination is down", To}),
      timer:sleep(1000),
      connect_to(To)
  end.
  

run_loop(#pusher{from_counter = ?COUNTER, from_url = URL}) ->
  ?D({"Too many connections to ", URL}),
  ok;

run_loop(#pusher{to_counter = ?COUNTER, to_url = URL}) ->
  ?D({"Too many connections to ", URL}),
  ok;

run_loop(#pusher{from = false, from_counter = Counter} = Pusher) ->
  run_loop(Pusher#pusher{from = undefined, from_counter = Counter + 1});

run_loop(#pusher{to = false, to_counter = Counter} = Pusher) ->
  run_loop(Pusher#pusher{to = undefined, to_counter = Counter + 1});
  
run_loop(#pusher{from = undefined, from_url = URL} = Pusher) ->
  run_loop(Pusher#pusher{from = connect_source(URL)});

run_loop(#pusher{to = undefined, to_url = URL} = Pusher) ->
  run_loop(Pusher#pusher{to = connect_to(URL)});


run_loop(#pusher{from = From, to = To} = Pusher) ->
  inet:setopts(From, [{active, once}]),
  receive
    {tcp, From, Bin} ->
      gen_tcp:send(To, Bin),
      run_loop(Pusher);
    {tcp_closed, From} ->
      run_loop(Pusher#pusher{from = undefined});
    {tcp_closed, To} ->
      run_loop(Pusher#pusher{to = undefined});
    Else ->
      ?D({"Undefined message", Else}),
      run_loop(Pusher)
  after
    ?TIMEOUT -> 
      ?D("Timeout in pusher"),
      ok
  end.
