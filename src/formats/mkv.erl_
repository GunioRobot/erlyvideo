%%% @author     Max Lapshin <max@maxidoors.ru>
%%% @doc        Matroska file reader
%%% @reference  See <a href="http://erlyvideo.org/" target="_top">http://erlyvideo.org/</a> for more information
%%% @end
%%%
%%%
%%% Copyright (c) 2009 Max Lapshin
%%%    This program is free software: you can redistribute it and/or modify
%%%    it under the terms of the GNU Affero General Public License as
%%%    published by the Free Software Foundation, either version 3 of the
%%%    License, or any later version.
%%%
%%% Permission is hereby granted, free of charge, to any person obtaining a copy
%%% of this software and associated documentation files (the "Software"), to deal
%%% in the Software without restriction, including without limitation the rights
%%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
%%% copies of the Software, and to permit persons to whom the Software is
%%% furnished to do so, subject to the following conditions:
%%%
%%% The above copyright notice and this permission notice shall be included in
%%% all copies or substantial portions of the Software.
%%%
%%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
%%% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
%%% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
%%% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
%%% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
%%% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
%%% THE SOFTWARE.
%%%
%%%---------------------------------------------------------------------------------------

-module(mkv).
-author('max@maxidoors.ru').
-include("../../include/ems.hrl").
-export([init/1, read_frame/1]).
-behaviour(gen_format).


init(#video_player{header = undefined} = Player) -> 
  % init(Player#video_player{frames = ets:new(frames, [ordered_set, {keypos, 2}])});


% init(#video_player{frames = _FrameTable} = Player) -> 
  read_element(Player#video_player{pos = 0}),
  {ok, Player}.


read_frame(#video_player{pos = '$end_of_table'}) ->
  {ok, done};


read_frame(#video_player{pos = undefined, frames = FrameTable} = Player) ->
  read_frame(Player#video_player{pos = ets:first(FrameTable)});
  
read_frame(#video_player{}) ->
  {ok, done}.


int_to_hex(N) when N < 256 ->
  [hex(N div 16), hex(N rem 16)];

int_to_hex(N) ->
  int_to_hex(N div 256) ++ int_to_hex(N rem 256).


hex(N) when N < 10 ->
  $0+N;
hex(N) when N >= 10, N < 16 ->
  $a + (N-10).

match_int(#video_player{pos = Pos, device = IoDev}, Bytes) ->
  {ok, Data} = file:pread(IoDev, Pos, Bytes),
  BitSize = Bytes*7,
  BData = iolist_to_binary(Data),
  <<_Shift:Bytes/big-integer, Int:BitSize/big-integer>> = BData,
  ByteSize = Bytes*8,
  <<WholeInt:ByteSize/big-integer>> = BData,
  ?D({"Int", Int, WholeInt}),
  {ok, Int, Bytes}.
  
bits_offset(<<1:1, _/bits>>)      -> 1;
bits_offset(<<0:1, 1:1, _/bits>>) -> 2;
bits_offset(<<0:2, 1:1, _/bits>>) -> 3;
bits_offset(<<0:3, 1:1, _/bits>>) -> 4;
bits_offset(<<0:4, 1:1, _/bits>>) -> 5;
bits_offset(<<0:5, 1:1, _/bits>>) -> 6;
bits_offset(<<0:6, 1:1, _/bits>>) -> 7;
bits_offset(<<0:7, 1:1>>)         -> 8.
  
decode_int(Player, <<1:1, Int:7>>) -> {ok, Int, 1};
decode_int(Player, Data) -> match_int(Player, bits_offset(Data)).

next_int(#video_player{pos = Pos, device = IoDev} = Player) ->
  case file:pread(IoDev, Pos, 1) of
    {ok, Data} -> decode_int(Player, iolist_to_binary(Data));
    {eof} -> eof
  end.


class_id(#video_player{pos = Pos, device = IoDev} = Player) ->
  case file:pread(IoDev, Pos, 1) of
    {ok, Data} -> 
      Bytes = bits_offset(iolist_to_binary(Data)),
      BitSize = Bytes*8,
      {ok, ClassIdData} = file:pread(IoDev, Pos, Bytes),
      <<ClassId:BitSize/big-integer>> = iolist_to_binary(ClassIdData),
      {ok, int_to_hex(ClassId), Bytes};
    {eof} -> eof
  end.


read_element(#video_player{pos = Pos, device = IoDev} = Player) ->
  {ok, ClassId, IdBytes} = class_id(Player),
  {ok, Size, SizeBytes} = next_int(Player#video_player{pos = Pos + IdBytes}),
  ?D({"Read", ClassId, Size}),
  parse_element(ClassId, Size, Player#video_player{pos = Pos + IdBytes + SizeBytes})
  .

parse_element("1a45dfa3", Size, Player) ->
  ?D("Got header").